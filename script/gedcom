#!/usr/bin/env ruby
require "date"
require "gender_detector"

module CustomGenderDetector
  GENDER_DETECTOR = GenderDetector.new(unknown_value: :unknown)
  OVERRIDES = {
    "kay" => :female,
    "jo" => :female,
    "stacy lee" => :female,
    "jay lindsey" => :male,
    "kris ann" => :female,
    "robert lynn" => :male,
    "richard lynn" => :male,
    "ricky jae" => :male,
  }

  def self.get_gender(given_name)
    override = OVERRIDES[given_name.downcase]
    return override if override

    gendered_names = given_name.split(" ").map do |part|
      gender_for_name(part)
    end.
      reject { |g| g == :unknown }.
      map { |g| g == :mostly_male ? :male : g }.
      map { |g| g == :mostly_female ? :female : g }

    if gendered_names.all?(:male)
      return "M"
    elsif gendered_names.all?(:female)
      return "F"
    end
  end

  def self.gender_for_name(name)
    OVERRIDES[name.downcase] || GENDER_DETECTOR.get_gender(name)
  end
end

class String
  def titleize
    split(/(\W)/).map(&:capitalize).join
  end
end

class GedcomRenderer
  HEADER = [
    "0 HEAD",
    "1 GEDC",
    "2 VERS 5.5.1",
    "2 FORM LINEAGE-LINKED",
    "1 DEST ANY",
    "1 CHAR UTF-8",
    "1 PLAC",
    "2 FORM Hamlet, City, City_Code, County, State, Country"
  ]

  attr_reader :root

  def initialize(root)
    @root = root
  end

  def to_s
    puts HEADER.join("\n")
    print_gedcom(root)
    puts "0 TRLR"
  end

  private

  def print_gedcom(person)
    puts person.to_gedcom.join("\n")

    # Pass 1: Spouse and family info
    person.marriages.each do |family|
      puts family.spouse.to_gedcom
      puts family.to_gedcom
    end

    # Pass 2: Children's sub-trees
    person.marriages.each do |family|
      family.children.each do |child|
        print_gedcom(child)
      end
    end
  end
end

class DateAndPlace
  attr_reader :year, :month, :day, :date, :age, :place

  def initialize(line)
    parse_line(line)
  end

  def to_gedcom(type)
    gedcom = ["1 #{type}"]

    if year
      if month && day
        gedcom << "2 DATE #{day} #{month} #{year}"
      else
        gedcom << "2 DATE #{year}"
      end
    elsif age
      gedcom << "2 AGE #{age}"
    end

    if place
      gedcom << "2 PLAC #{place}"
    end

    gedcom
  end

  private

  def parse_line(line)
    line = line.gsub(/^[mbd]:/, '').strip
    case line
    when /^(\d+) ([a-zA-Z.]+), (\d{4})(, (.*))?/
      @day, @month, @year, @place = $1, $2, $3, $5
      @date = Date.parse("#{day} #{month}, #{year}")
      # Format the month as uppercase abbreviation
      @month = date.strftime("%b").upcase
    when /\d{4}/
      @year = line.to_i
    when /in infancy/
      @age = "INFANT"
    when /^$/
      # NOP
    else
      raise "Cannot parse date and place from #{line}"
    end
  end
end

class OutlineParser
  attr_reader :file

  def initialize(file)
    @file = file
  end

  def parse
    lines = File.readlines(file)
    root = nil
    families = {}
    current_depth = 0
    current_parent = nil
    current_person = nil
    marriage_line = nil
    marriage_id = nil
    current_spouse = nil

    lines.each_with_index do |line, i|
      line_no = i + 1
      line = line.strip

      next if line =~ /^\s*$/
      next if line =~ /^=/

      # Short circuit for now while we get the initial parsing correct
      break if line == "[[stop]]"

      if line =~ /\[\[root-(family-.*)\]\]/
        root_family_id = $1
        current_parent = families[root_family_id].person
        current_depth = 1
        next
      end

      if match = line.match(/^(\*+) (.*)/)
        depth = match[1].size
        name = match[2]
        current_spouse = nil

        if current_depth == 0
          current_person = Person.new(name)
          root = current_person
        elsif depth == current_depth
          # Sibling
          current_person = Person.new(name)
          current_parent.add_child(current_person)
        elsif depth > current_depth
          # Child
          current_parent = current_person
          current_person = Person.new(name)
          current_parent.add_child(current_person)
        elsif depth < current_depth
          # Back
          (current_depth - depth).times do
            current_parent = current_parent.parent
          end
          current_person = Person.new(name)
          current_parent.add_child(current_person)
        end

        current_depth = depth
        next
      end

      if marriage_line
        if line =~ /\[\[(.*)\]\]/
          marriage_id = $1
          next
        end
        current_spouse = Person.new(line)
        marriage = current_person.add_marriage(marriage_line, current_spouse)
        if marriage_id
          if families.has_key?(marriage_id)
            raise "Re-used marriage ID #{marriage_id}"
          end
          families[marriage_id] = marriage
        end
        marriage_line = nil
        marriage_id = nil
        next
      end

      if line.start_with?("m:")
        marriage_line = line
        next
      end

      if line.start_with?("b:")
        person = current_spouse || current_person
        person.birth = line
        next
      end

      if line.start_with?("d:")
        person = current_spouse || current_person
        person.death = line
        next
      end

      raise "Unrecognized line format"
    rescue => e
      puts "Cannot parse line @ #{line_no}: #{line}"
      puts e
      puts e.backtrace
      exit
    end

    root
  end
end

class Family
  @@next_id = 1

  # "person" is the person in the family tree
  # "spouse" is the person under the marriage line
  attr_accessor :id, :marriage, :person, :spouse, :children

  def initialize(marriage_line, person:, spouse:)
    @id = @@next_id
    @@next_id += 1
    @person = person
    @spouse = spouse
    if marriage_line
      @marriage = DateAndPlace.new(marriage_line)
    end
    @children = []
  end

  def gedcom_id
    "@F" + id.to_s.rjust(5, "0") + "@"
  end

  def to_gedcom
    gedcom = ["0 #{gedcom_id} FAM"]

    if person.gender == "M"
      gedcom << [
        "1 HUSB #{person.gedcom_id}",
        "1 WIFE #{spouse.gedcom_id}"
      ]
    else
      gedcom << [
        "1 HUSB #{spouse.gedcom_id}",
        "1 WIFE #{person.gedcom_id}"
      ]
    end

    if marriage
      gedcom += marriage.to_gedcom("MARR")
    end

    children.each do |child|
      gedcom << "1 CHIL #{child.gedcom_id}"
    end

    gedcom
  end
end

class Person
  @@next_id = 1

  attr_reader :id, :given_name, :surname, :birth, :death, :stillborn, :marriages
  attr_accessor :child_of

  def initialize(name)
    @id = @@next_id
    @@next_id += 1
    @marriages = []
    @stillborn = false
    parse_name(name)
  end

  def to_s
    "#{id}: #{given_name} #{surname}"
  end

  def gedcom_id
    "@I" + id.to_s.rjust(5, "0") + "@"
  end

  def parent
    child_of&.person
  end

  def birth=(line)
    @birth = DateAndPlace.new(line)
    verify_child_of
    @birth
  end

  def death=(line)
    @death = DateAndPlace.new(line)
  end

  def gender
    @gender ||= determine_gender
  end

  def add_marriage(marriage_line, spouse)
    marriage = Family.new(marriage_line, person: self, spouse: spouse)
    marriages << marriage
    spouse.marriages << marriage
    marriage
  end

  def add_child(child)
    if marriages.empty?
      raise "Tried adding a child without a marriage"
    end

    family = marriages.first
    family.children << child
    child.child_of = family
  end

  def to_gedcom
    gedcom = ["0 #{gedcom_id} INDI"]

    unless stillborn
      gedcom += [
        "1 NAME #{given_name} /#{surname}/",
        "2 GIVN #{given_name}",
        "2 SURN #{surname}"
      ]
    end

    gedcom << "1 SEX #{gender}"

    if birth
      gedcom += birth.to_gedcom("BIRT")
      if stillborn
        gedcom << "2 TYPE Stillborn"
      end
    end

    if death
      gedcom += death.to_gedcom("DEAT")
      if stillborn
        gedcom << "2 AGE STILLBORN"
      end
    end

    if child_of
      gedcom << "1 FAMC #{child_of.gedcom_id}"
    end

    marriages.each do |family|
      gedcom << "1 FAMS #{family.gedcom_id}"
    end

    gedcom
  end

  private

  def parse_name(name)
    if name =~ /still ?born/i
      @stillborn = true
      if name =~ /daughter/i
        @gender = "F"
      elsif name =~ /son/i
        @gender = "M"
      end
    end

    name_parts = name.upcase.split(" ")
    if name_parts[-2] == "MC"
      @given_name = name_parts[0..-3].join(" ").titleize
      @surname = name_parts[-2..-1].join(" ")
    else
      @given_name = name_parts[0..-2].join(" ").titleize
      @surname = name_parts.last
    end
  end

  def determine_gender
    detected_gender = CustomGenderDetector.get_gender(given_name)
    if detected_gender
      return detected_gender
    end

    if marriages.any?
      married_to = marriages.
        map { |m| m.person == self ? m.spouse : m.person }.
        map(&:gender).
        uniq
      if married_to == ["M"]
        return "F"
      elsif married_to == ["F"]
        return "M"
      end
    end

    raise "Cannot determine gender: #{given_name}"
  end

  def verify_child_of
    return if birth&.date.nil?
    return unless parent
    return if parent.marriages.size == 1

    checkable_marriages = parent.marriages.
      reject { |f| f.marriage.nil? || f.marriage.date.nil? }.
      sort_by { |f| f.marriage.date }.
      reverse

    family = checkable_marriages.find { |f| birth.date >= f.marriage.date }

    if family.nil?
      family = (parent.marriages - checkable_marriages).first
    end

    if family != child_of
      child_of.children.delete(self)
      @child_of = family
      family.children << self
    end
  end
end

root = OutlineParser.new(ARGV[0]).parse
puts GedcomRenderer.new(root).to_s
